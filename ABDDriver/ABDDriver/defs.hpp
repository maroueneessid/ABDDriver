#pragma once
#include <ntifs.h>
#include <ntdef.h>

#define TO_PROTECT L"msedge_helper.exe"
# define MAX_BLACKLISTED 10

#define DEBUG_PRINT(format , ...) DbgPrintEx(0, 0, format , __VA_ARGS__)

// IOCL Custom codes
#define IOCTL_UNWANTED_DLL_DETECTION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x921, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_RESUME_PROTECTED_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x922, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_BLOCK_ENTRY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x923, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_SUSPEND_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x924, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_FINISH_OPERATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x925, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)




NTSYSAPI
NTSTATUS
NTAPI 
PsSuspendProcess(IN PEPROCESS Process);


NTSYSAPI
NTSTATUS
NTAPI
PsResumeProcess(PEPROCESS Process);

typedef struct _UNWANTED_DLL_DATA {
		
	HANDLE hProcess;
	HANDLE hModule;
	PVOID pEntry;
} UNWANTED_DLL_DATA , *PUNWATED_DLL_DATA ;


typedef struct _UNWANTED_DLL_DATA_LIST {

	UNWANTED_DLL_DATA entry[MAX_BLACKLISTED];

} UNWANTED_DLL_DATA_LIST, * PUNWATED_DLL_DATA_LIST;

typedef struct _WRITE_OP_INPUT {
	HANDLE hProcess;
	PVOID pEntry;
	PVOID pBuffer;
	SIZE_T szBuffer;
} WRITE_OP_INPUT, * PWRITE_OP_INPUT;

extern int GlobalUnwantedIndex;


extern UNWANTED_DLL_DATA unwanted;
UNWANTED_DLL_DATA_LIST  listOfUnwanted;
extern KSPIN_LOCK unwantedLock;



PDEVICE_OBJECT pDeviceObject;
UNICODE_STRING dev, dos;



NTSTATUS IoControl(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS CloseCall(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS CreateCall(PDEVICE_OBJECT DeviceObject, PIRP Irp);


// Some Helper Functions
PVOID GetEntryPoint(PVOID ImageBaseAddress);











