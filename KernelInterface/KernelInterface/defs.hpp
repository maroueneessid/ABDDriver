#pragma once
#include <windows.h>
#include <stdio.h>
#include <psapi.h>
#include <winternl.h>

// IOCTL Codes
#define IOCTL_UNWANTED_DLL_DETECTION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x921, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_RESUME_PROTECTED_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x922, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_BLOCK_ENTRY CTL_CODE(FILE_DEVICE_UNKNOWN, 0x923, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_SUSPEND_PROCESS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x924, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_FINISH_OPERATION CTL_CODE(FILE_DEVICE_UNKNOWN, 0x925, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)


#define MAX_BLACKLISTED 10
#define BLOCK_BYTES_MAX_LEN 10

// Global Vars
extern UCHAR blocker[BLOCK_BYTES_MAX_LEN];
extern HANDLE hDevice;

typedef struct _UNWANTED_DLL_DATA {

    HANDLE hProcess;
    HANDLE hModule;
    PVOID pEntry;
} UNWANTED_DLL_DATA, * PUNWATED_DLL_DATA;


typedef struct _UNWANTED_DLL_DATA_LIST {

    UNWANTED_DLL_DATA entry[MAX_BLACKLISTED];

} UNWANTED_DLL_DATA_LIST, * PUNWATED_DLL_DATA_LIST;

typedef struct _WRITE_OP_INPUT {
    HANDLE hProcess;
    PVOID pEntry;
    PVOID pBuffer;
    SIZE_T szBuffer;
} WRITE_OP_INPUT, * PWRITE_OP_INPUT;



BOOL BlockRequest(HANDLE hDevice, WRITE_OP_INPUT towrite);
BOOL SuspendRequest(HANDLE hDevice);
BOOL ResumeRequest(HANDLE hDevice);
BOOL BlockEntry(UNWANTED_DLL_DATA data);
BOOL FinishOperationRequest(HANDLE hDevice);



